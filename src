
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
plt.style.use('ggplot')
plt.rcParams.update({'font.size': 16, 'font.family': 'sans'})

death_2014 = pd.read_csv('/home/allen/Galva/capstones/capstone1/Weekly_Counts_of_Deaths_by_State_and_Select_Causes__2014-2018.csv')
death_2019 = pd.read_csv('/home/allen/Galva/capstones/capstone1/Weekly_Counts_of_Deaths_by_State_and_Select_Causes__2019-2020.csv')
death_master = pd.concat([death_2014 , death_2019])

#import weekly death rate csv
#Concat dfs

death_columns = death_master.columns 
death_cols_to_remove = ['Jurisdiction of Occurrence','Malignant neoplasms (C00-C97)', 'Septicemia (A40-A41)','Symptoms, signs and abnormal clinical and laboratory findings, not elsewhere classified (R00-R99)']
for i in death_columns:
    if i[0] == 'f':
        death_cols_to_remove.append(i)
    if "COVID" in i:
        death_cols_to_remove.append(i)

death_master.drop(death_cols_to_remove, axis =1 , inplace=True)

death_master.columns =  ['MMWR_Year', 'MMWR_Week', 'Week_End_Date', 'All_Cause',
       'Diabetes',
       'Alzheimer', 'Influenza_pneumonia',
       'Chronic_lower_respiratory',
       'Other_diseases_of_respiratory',
       'Nephritis, nephrotic_syndrome',
       'Diseases_of_heart',
       'Cerebrovascular_diseases', 'All Cause',
       'Influenza_and_pneumonia']
#Rename Columns 

pm10_2014 = pd.read_csv('/home/allen/Galva/capstones/capstone1/pm10_2014.csv')
pm10_2015 = pd.read_csv('/home/allen/Galva/capstones/capstone1/pm10_2015.csv')
pm10_2016 = pd.read_csv('/home/allen/Galva/capstones/capstone1/pm10_2016.csv')
pm10_2017 = pd.read_csv('/home/allen/Galva/capstones/capstone1/pm10_2017.csv')
pm10_2018 = pd.read_csv('/home/allen/Galva/capstones/capstone1/pm10_2018.csv')
pm10_2019 = pd.read_csv('/home/allen/Galva/capstones/capstone1/pm10_2019.csv')

pm10_master = pd.concat([pm10_2014, pm10_2015,pm10_2016,pm10_2017,pm10_2018,pm10_2019])
#Create pm10 dfs

pm25_2014 = pd.read_csv('/home/allen/Galva/capstones/capstone1/pm_25_2014.csv')
pm25_2015 = pd.read_csv('/home/allen/Galva/capstones/capstone1/pm_25_2015.csv')
pm25_2016 = pd.read_csv('/home/allen/Galva/capstones/capstone1/pm_25_2016.csv')
pm25_2017 = pd.read_csv('/home/allen/Galva/capstones/capstone1/pm_25_2017.csv')
pm25_2018 = pd.read_csv('/home/allen/Galva/capstones/capstone1/pm_25_2018.csv')
pm25_2019 = pd.read_csv('/home/allen/Galva/capstones/capstone1/pm_25_2019.csv')

pm25_master = pd.concat([pm25_2014,pm25_2015,pm25_2016,pm25_2017,pm25_2018,pm25_2019])
#cerate pm25 dfs

pm10_master = pd.read_csv('/home/allen/Galva/capstones/capstone1/pm10_master.csv')
pm25_master = pd.read_csv('/home/allen/Galva/capstones/capstone1/pm25_master.csv')

site_id_25  = pm25_master['Site ID'].unique()


def get_overlap(x):
    lst_tups = []
    for i in x:

        get_count25 = len(pm25_master[pm25_master['Site ID'] == i])
        get_count10 = len(pm10_master[pm10_master['Site ID'] == i])

        lst_tups.append((i,get_count25,get_count10))

    return sorted(lst_tups, reverse = True)
print(get_overlap(x=site_id_25))


def make_df(x):
    df10_2_test={}
    df25_2_test={}

    for i,ii in enumerate(x):
        i_=str(i)

        df10_2_test[i_] = pm10_master[pm10_master['Site ID'] == ii]
        df25_2_test[i_] = pm25_master[pm25_master['Site ID'] == ii]

    return df10_2_test , df25_2_test

dfs_2_test = make_df(x=sites_to_test)

pm10_master['Date'] = pd.DatetimeIndex(pm10_master['Date']).date
pm25_master['Date'] = pd.DatetimeIndex(pm25_master['Date']).date

pm25_site1a = pm25_master[pm25_master['Site ID'] == 80310026]
pm10_site1a = pm10_master[pm10_master['Site ID'] == 80310026]

pm25_site1a['Date'] = pd.to_datetime(pm25_site1a['Date'])
pm10_site1a['Date'] = pd.to_datetime(pm10_site1a['Date'])

pm25_1a = pm25_site1a.set_index('Date').resample('W-Sun').mean()
pm10_1a = pm10_site1a.set_index('Date').resample('W-Sun').mean()

pm10_ = np.array(pm10_1a['Daily Mean PM10 Concentration'])
#extract column from DF
pm25_ = np.array(pm25_1a['Daily Mean PM2.5 Concentration'])

death_copy =death_master.copy()

print(len(pm25_2),len(pm25_3),len(pm10_2),len(pm10_3))

death_copy['PM_10'] = pd.Series(pm10_1a, index = death_copy.index)
death_copy['PM_25'] = pd.Series(pm25_1a, index = death_copy.index)

bo25 = death_copy[death_copy['PM_25'] < 14 ]
ba25 = death_copy[death_copy['PM_25'] >= 14 ]

bo25_ = np.array(bo25['Diseases_of_heart'])
ba25_= np.array(ba25['Diseases_of_heart']) 

ibo = death_copy[death_copy['Diseases_of_heart'] < 174 ]
ib3 = death_copy[death_copy['Diseases_of_heart'] >= 174 ]

iboo = np.array(ibo['PM_25'])
ib33 = np.array(ib3['PM_25'])

stats.ttest_ind(iboo,ib33, equal_var = False, nan_policy='omit')

iiboo = np.array(ibo['PM_10'])
iib33 = np.array(ib3['PM_10'])

stats.ttest_ind(iiboo,iib33, equal_var = False, nan_policy='omit')
